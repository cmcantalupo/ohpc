From 733d56b9d6437f9711d40d158c63dcf7af32ea45 Mon Sep 17 00:00:00 2001
From: "Christopher M. Cantalupo" <christopher.m.cantalupo@intel.com>
Date: Fri, 20 Oct 2017 15:49:03 -0700
Subject: [PATCH] Enable geopmctl to be run as a different user than
 application.

- If user specifies GEOPM_SHMEM in the environment, do
  not modify it with the user id.
- Clean up EnvironmentTest.
- If user does not provide a shmkey that starts with '/', add it.

Change-Id: I5e9faf420f4a6ea6671fe984672243f12f952fc6
Signed-off-by: Christopher M. Cantalupo <christopher.m.cantalupo@intel.com>
---
 src/Environment.cpp      |  6 ++++--
 test/EnvironmentTest.cpp | 16 ++++++++--------
 2 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/src/Environment.cpp b/src/Environment.cpp
index 479a4f3..1635d27 100644
--- a/src/Environment.cpp
+++ b/src/Environment.cpp
@@ -97,7 +97,7 @@ namespace geopm
     Environment::Environment()
         : m_report("")
         , m_policy("")
-        , m_shmkey("/geopm-shm")
+        , m_shmkey("/geopm-shm-" + std::to_string(geteuid()))
         , m_trace("")
         , m_plugin_path("")
         , m_profile("")
@@ -115,7 +115,9 @@ namespace geopm
         (void)get_env("GEOPM_REPORT", m_report);
         (void)get_env("GEOPM_POLICY", m_policy);
         (void)get_env("GEOPM_SHMKEY", m_shmkey);
-        m_shmkey += "-" + std::to_string(geteuid());
+        if (m_shmkey[0] != '/') {
+            m_shmkey = "/" + m_shmkey;
+        }
         m_do_trace = get_env("GEOPM_TRACE", m_trace);
         (void)get_env("GEOPM_PLUGIN_PATH", m_plugin_path);
         if (!get_env("GEOPM_REPORT_VERBOSITY", m_report_verbosity) && m_report.size()) {
diff --git a/test/EnvironmentTest.cpp b/test/EnvironmentTest.cpp
index 2b9e754..7f67b8f 100644
--- a/test/EnvironmentTest.cpp
+++ b/test/EnvironmentTest.cpp
@@ -119,7 +119,7 @@ TEST_F(EnvironmentTest, construction0)
     setenv("GEOPM_PROFILE", m_profile.c_str(), 1);
 
     EXPECT_EQ(m_policy, std::string(geopm_env_policy()));
-    EXPECT_EQ(m_shmkey + "-" + std::to_string(geteuid()), std::string(geopm_env_shmkey()));
+    EXPECT_EQ("/" + m_shmkey, std::string(geopm_env_shmkey()));
     EXPECT_EQ(m_trace, std::string(geopm_env_trace()));
     EXPECT_EQ(m_plugin_path, std::string(geopm_env_plugin_path()));
     EXPECT_EQ(m_report, std::string(geopm_env_report()));
@@ -138,7 +138,6 @@ TEST_F(EnvironmentTest, construction1)
 {
     setenv("GEOPM_REPORT", m_report.c_str(), 1);
     setenv("GEOPM_POLICY", m_policy.c_str(), 1);
-    setenv("GEOPM_SHMKEY", m_shmkey.c_str(), 1);
     setenv("GEOPM_TRACE", m_trace.c_str(), 1);
     setenv("GEOPM_PLUGIN_PATH", m_plugin_path.c_str(), 1);
     setenv("GEOPM_REPORT_VERBOSITY", std::to_string(m_report_verbosity).c_str(), 1);
@@ -152,12 +151,13 @@ TEST_F(EnvironmentTest, construction1)
     //setenv("GEOPM_PROFILE", m_profile.c_str(), 1);
     m_profile = program_invocation_name;
 
-    EXPECT_EQ(strcmp(m_policy.c_str(), geopm_env_policy()), 0);
-    EXPECT_EQ(strcmp((m_shmkey + "-" + std::to_string(geteuid())).c_str(), geopm_env_shmkey()), 0);
-    EXPECT_EQ(strcmp(m_trace.c_str(), geopm_env_trace()), 0);
-    EXPECT_EQ(strcmp(m_plugin_path.c_str(), geopm_env_plugin_path()), 0);
-    EXPECT_EQ(strcmp(m_report.c_str(), geopm_env_report()), 0);
-    EXPECT_EQ(strcmp(m_profile.c_str(), geopm_env_profile()), 0);
+    std::string default_shmkey("/geopm-shm-" + std::to_string(geteuid()));
+    EXPECT_EQ(m_policy, std::string(geopm_env_policy()));
+    EXPECT_EQ(default_shmkey, std::string(geopm_env_shmkey()));
+    EXPECT_EQ(m_trace, std::string(geopm_env_trace()));
+    EXPECT_EQ(m_plugin_path, std::string(geopm_env_plugin_path()));
+    EXPECT_EQ(m_report, std::string(geopm_env_report()));
+    EXPECT_EQ(m_profile, std::string(geopm_env_profile()));
     EXPECT_EQ(m_report_verbosity, geopm_env_report_verbosity());
     EXPECT_EQ(m_pmpi_ctl, geopm_env_pmpi_ctl());
     EXPECT_EQ(0, geopm_env_do_region_barrier());
-- 
1.8.3.1

